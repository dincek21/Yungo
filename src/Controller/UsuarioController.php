<?php

namespace App\Controller;

use App\Entity\Roles;
use App\Entity\Usuario;
use App\Form\PhotoType;
use App\Form\UsuarioType;
use Doctrine\ORM\Mapping\Id;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;

class UsuarioController extends AbstractController
{
    /**
     * @Route("/usuario/create", name="create_user")
     */
    public function createuser(Request $request)
    {

        $user = new Usuario();
        $form = $this->createForm(UsuarioType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UploadedFile $brochureFile */
            $img = $form['picture_user']->getData();
            if($img){
                $originalFilename = pathinfo($img->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = transliterator_transliterate('Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()', $originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$img->guessExtension();
                try {
                    $img->move(
                        $this->getParameter('brochures_directory'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $user->setPictureUser($newFilename);
            }
            $em = $this->getDoctrine()->getManager();
            $user = $form->getData();
            $em->persist($user);
            $em->flush();

            return $this->redirectToRoute('create_user');
        }


        return $this->render('usuario/create.html.twig', [
            'form'      => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/usuario/personal/{id}", name="usuario")
     */
    public function usuario($id,Request $request)
    {
        $users = $this->getDoctrine()
        ->getRepository(Usuario::class)
        ->findOneBy(['id' => $id]);

        return $this->render('usuario/index.html.twig', [
            'id'        => $id,
            'name'      => $users->getNameUser()." ".$users->getLastnameUser(),
            'age'       => $users->getAgeUser(),
            'email'     => $users->getEmailUser(),
            'rol'       => $users->getFkRoles()->getrols(),
            'gender'    => $users->getFkGender()->getGenders(),
            'picture'   => $users->getPictureUser(),
        ]);
    }

    /**
     * @Route("usuario/editphoto/{id}", name="photo_new")
     */
    public function photo($id,Request $request)
    {
        $users = $this->getDoctrine()
        ->getRepository(Usuario::class)
        ->findOneBy(['id'=>$id]);
        
        $form = $this->createForm(PhotoType::class, $users);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UploadedFile $brochureFile */
            $img = $form['picture_user']->getData();
            if($img->guessExtension() == 'jpg' || $img->guessExtension() == 'jpeg'){

                $originalFilename = pathinfo($img->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = transliterator_transliterate('Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()', $originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$img->guessExtension();

                try {
                    $img->move(
                    $this->getParameter('brochures_directory'),
                        $newFilename
                    );

                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $users->setPictureUser($newFilename);
            }
            $em = $this->getDoctrine()->getManager();
            $users = $form->getData();
            $em->persist($users);
            $em->flush();

            return new JsonResponse([
                'status' => true,
                'image' => $newFilename,
            ]);

        }

        return new JsonResponse([
            'html' =>$this->renderView('usuario/editphoto.html.twig', [
                'id' => $id,
                'form' => $form->createView(),
            ]),
        ]); 
        
    }

    /**
     * @Route("/usuario/consult", name="consultas")
     */
    public function consult($id, Request $request)
    {
        $users = $this->getDoctrine()
        ->getRepository(Usuario::class)
        ->findOneBy(['id' => $id]);

        return $this->render('usuario/consult.html.twig', [
            'id'        => $id,
            'name'      => $users->getNameUser()." ".$users->getLastnameUser(),
            'age'       => $users->getAgeUser(),
            'email'     => $users->getEmailUser(),
            'rol'       => $users->getFkRoles()->getrols(),
            'gender'    => $users->getFkGender()->getGenders(),
            'picture'   => $users->getPictureUser(),
        ]);
    }

}